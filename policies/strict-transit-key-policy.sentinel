# Function to validate exportable parameter
validate_exportable = func() {
  print("Policy Enforcement: Exportable Parameter Check")
  print("Namespace:", namespace.path)
  print("Request Path:", request.path)
  print("Operation:", request.operation)

  # Skip validation if the operation is "read", "list", or "rotate"
  if request.operation == "read" or request.operation == "list" or request.path contains "/rotate" {
    print("INFO: Exportable validation skipped for read/list/rotate operation.")
    return true
  }

  # Check if the request contains "exportable"
  if "exportable" in keys(request.data) {
    print("INFO: Exportable value found:", request.data.exportable)

    # Handle both boolean true and string "true"
    if request.data.exportable != "true" {
      print("ERROR: 'exportable' must be set to 'true' for key:", request.path)
      return false
    } else {
      print("SUCCESS: 'exportable' is correctly set to 'true'.")
      return true
    }
  } else {
    print("ERROR: 'exportable' parameter is missing for key:", request.path)
    return false
  }
}

# Function to validate deletion_allowed parameter
validate_deletion_allowed = func() {
  print("Policy Enforcement: Deletion Allowed Parameter Check")
  print("Namespace:", namespace.path)
  print("Request Path:", request.path)
  print("Operation:", request.operation)

  # Skip validation if the operation is "read", "list", or "rotate"
  if request.operation == "read" or request.operation == "list" or request.path contains "/rotate" {
    print("INFO: Deletion_allowed validation skipped for read/list/rotate operation.")
    return true
  }

  # Check if the request contains "deletion_allowed"
  if "deletion_allowed" in keys(request.data) {
    print("INFO: Deletion_allowed value found:", request.data.deletion_allowed)

    # Handle both boolean false and string "false"
    if request.data.deletion_allowed != "false" {
      print("ERROR: 'deletion_allowed' must be set to 'false' for key:", request.path)
      return false
    } else {
      print("SUCCESS: 'deletion_allowed' is correctly set to 'false'.")
      return true
    }
  } else {
    print("ERROR: 'deletion_allowed' parameter is missing for key:", request.path)
    return false
  }
}

# Main rule combining both validations
exportable_validated = validate_exportable()
deletion_allowed_validated = validate_deletion_allowed()

main = rule {
  exportable_validated and deletion_allowed_validated
}
